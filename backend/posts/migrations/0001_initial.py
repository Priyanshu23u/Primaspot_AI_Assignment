# Generated by Django 5.2.4 on 2025-09-27 17:20

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('influencers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.CharField(db_index=True, help_text='Instagram post ID from API', max_length=100, unique=True)),
                ('shortcode', models.CharField(db_index=True, help_text='Instagram shortcode (URL identifier)', max_length=50, unique=True)),
                ('image_url', models.URLField(help_text='Post image/thumbnail URL (IMPORTANT REQUIREMENT)', max_length=1000)),
                ('caption', models.TextField(blank=True, help_text='Post caption text (IMPORTANT REQUIREMENT)', null=True)),
                ('likes_count', models.BigIntegerField(db_index=True, default=0, help_text='Number of likes (IMPORTANT REQUIREMENT)', validators=[django.core.validators.MinValueValidator(0)])),
                ('comments_count', models.BigIntegerField(db_index=True, default=0, help_text='Number of comments (IMPORTANT REQUIREMENT)', validators=[django.core.validators.MinValueValidator(0)])),
                ('post_date', models.DateTimeField(db_index=True, help_text='When the post was originally published')),
                ('is_video', models.BooleanField(default=False, help_text='Whether this post contains video content')),
                ('video_url', models.URLField(blank=True, help_text='Video URL if post contains video', max_length=1000, null=True)),
                ('typename', models.CharField(blank=True, help_text='Instagram post type (GraphImage, GraphVideo, etc.)', max_length=50, null=True)),
                ('accessibility_caption', models.TextField(blank=True, help_text="Instagram's auto-generated accessibility description", null=True)),
                ('location_name', models.CharField(blank=True, help_text='Location name if post is geo-tagged', max_length=200, null=True)),
                ('location_id', models.CharField(blank=True, help_text='Instagram location ID', max_length=50, null=True)),
                ('tagged_users_count', models.IntegerField(default=0, help_text='Number of users tagged in this post', validators=[django.core.validators.MinValueValidator(0)])),
                ('keywords', models.TextField(blank=True, default='[]', help_text='JSON list of keywords')),
                ('vibe_classification', models.CharField(blank=True, choices=[('luxury', 'Luxury/Lavish'), ('aesthetic', 'Aesthetic'), ('casual', 'Casual'), ('energetic', 'Energetic'), ('professional', 'Professional'), ('lifestyle', 'Lifestyle'), ('fashion', 'Fashion'), ('fitness', 'Fitness'), ('travel', 'Travel'), ('food', 'Food')], db_index=True, help_text='AI-classified vibe/ambience (IMPORTANT REQUIREMENT - AI Analysis)', max_length=50, null=True)),
                ('quality_score', models.DecimalField(decimal_places=2, default=0.0, help_text='AI-generated quality indicators 0-10 (IMPORTANT REQUIREMENT - AI Analysis)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('sentiment_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Sentiment analysis of caption (-1 negative to +1 positive)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('-1.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('category', models.CharField(blank=True, choices=[('lifestyle', 'Lifestyle'), ('fitness', 'Fitness'), ('fashion', 'Fashion'), ('food', 'Food'), ('travel', 'Travel'), ('business', 'Business'), ('entertainment', 'Entertainment'), ('sports', 'Sports'), ('technology', 'Technology'), ('art', 'Art & Culture')], help_text='AI-determined content category', max_length=50, null=True)),
                ('engagement_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Calculated engagement rate percentage', max_digits=5)),
                ('virality_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Calculated virality score based on engagement vs follower ratio', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('is_analyzed', models.BooleanField(db_index=True, default=False, help_text='Whether AI analysis has been completed')),
                ('analysis_date', models.DateTimeField(blank=True, help_text='When AI analysis was last performed', null=True)),
                ('analysis_version', models.CharField(default='1.0', help_text='Version of AI analysis performed', max_length=10)),
                ('analysis_confidence', models.DecimalField(decimal_places=2, default=0.0, help_text='Confidence score of AI analysis (0-1)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('scraped_at', models.DateTimeField(auto_now_add=True, help_text='When this post was scraped from Instagram')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time this post data was updated')),
                ('scraper_version', models.CharField(default='1.0', help_text='Version of scraper that collected this data', max_length=10)),
                ('has_caption', models.BooleanField(default=False, help_text='Whether post has a caption')),
                ('has_location', models.BooleanField(default=False, help_text='Whether post has location data')),
                ('has_tags', models.BooleanField(default=False, help_text='Whether post has tagged users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('influencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='influencers.influencer')),
            ],
            options={
                'db_table': 'posts',
                'ordering': ['-post_date'],
            },
        ),
        migrations.CreateModel(
            name='PostAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lighting_score', models.DecimalField(decimal_places=2, default=0.0, help_text='AI-analyzed lighting quality (0-10)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('composition_score', models.DecimalField(decimal_places=2, default=0.0, help_text='AI-analyzed composition quality (0-10)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('visual_appeal_score', models.DecimalField(decimal_places=2, default=0.0, help_text='AI-analyzed visual appeal (0-10)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('sharpness_score', models.DecimalField(decimal_places=2, default=0.0, help_text='AI-analyzed image sharpness (0-10)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('color_harmony_score', models.DecimalField(decimal_places=2, default=0.0, help_text='AI-analyzed color harmony (0-10)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('detected_objects', models.TextField(blank=True, default='[]', help_text='JSON list of detected objects')),
                ('dominant_colors', models.TextField(blank=True, default='[]', help_text='JSON list of colors')),
                ('faces_detected', models.IntegerField(default=0, help_text='Number of faces detected by AI', validators=[django.core.validators.MinValueValidator(0)])),
                ('people_count', models.IntegerField(default=0, help_text='Estimated number of people in image', validators=[django.core.validators.MinValueValidator(0)])),
                ('category', models.CharField(blank=True, help_text='AI-determined content category', max_length=50, null=True)),
                ('mood', models.CharField(blank=True, choices=[('happy', 'Happy'), ('sad', 'Sad'), ('excited', 'Excited'), ('calm', 'Calm'), ('energetic', 'Energetic'), ('romantic', 'Romantic'), ('professional', 'Professional'), ('casual', 'Casual'), ('mysterious', 'Mysterious'), ('inspirational', 'Inspirational')], help_text='AI-determined mood/emotion', max_length=50, null=True)),
                ('style', models.CharField(blank=True, choices=[('minimalist', 'Minimalist'), ('vibrant', 'Vibrant'), ('vintage', 'Vintage'), ('modern', 'Modern'), ('artistic', 'Artistic'), ('documentary', 'Documentary'), ('fashion', 'Fashion'), ('landscape', 'Landscape'), ('portrait', 'Portrait'), ('street', 'Street Photography')], help_text='AI-determined photography/content style', max_length=50, null=True)),
                ('caption_sentiment', models.DecimalField(decimal_places=2, default=0.0, help_text='Caption sentiment analysis (-1 to +1)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('-1.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))])),
                ('caption_length', models.IntegerField(default=0, help_text='Length of caption in characters', validators=[django.core.validators.MinValueValidator(0)])),
                ('hashtag_count', models.IntegerField(default=0, help_text='Number of hashtags in caption', validators=[django.core.validators.MinValueValidator(0)])),
                ('mention_count', models.IntegerField(default=0, help_text='Number of @mentions in caption', validators=[django.core.validators.MinValueValidator(0)])),
                ('aesthetic_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Overall aesthetic score (0-10)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('uniqueness_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Content uniqueness score (0-10)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('processing_time_ms', models.IntegerField(default=0, help_text='Time taken for AI processing in milliseconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('ai_model_version', models.CharField(default='1.0', help_text='Version of AI model used for analysis', max_length=20)),
                ('processing_errors', models.TextField(blank=True, default='[]', help_text='JSON list of errors')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detailed_analysis', to='posts.post')),
            ],
            options={
                'verbose_name': 'Post Analysis',
                'verbose_name_plural': 'Post Analyses',
                'db_table': 'post_detailed_analyses',
            },
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['influencer', '-post_date'], name='posts_influencer_date_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-likes_count'], name='posts_likes_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-engagement_rate'], name='posts_engagement_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['vibe_classification'], name='posts_vibe_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['category'], name='posts_category_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['is_analyzed'], name='posts_analyzed_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-virality_score'], name='posts_virality_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['post_date', 'is_analyzed'], name='posts_date_analyzed_idx'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(condition=models.Q(('likes_count__gte', 0)), name='posts_likes_positive'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(condition=models.Q(('comments_count__gte', 0)), name='posts_comments_positive'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(condition=models.Q(('quality_score__gte', 0), ('quality_score__lte', 10)), name='posts_quality_range'),
        ),
        migrations.AddIndex(
            model_name='postanalysis',
            index=models.Index(fields=['-aesthetic_score'], name='analysis_aesthetic_idx'),
        ),
        migrations.AddIndex(
            model_name='postanalysis',
            index=models.Index(fields=['-visual_appeal_score'], name='analysis_visual_idx'),
        ),
        migrations.AddIndex(
            model_name='postanalysis',
            index=models.Index(fields=['category'], name='analysis_category_idx'),
        ),
        migrations.AddIndex(
            model_name='postanalysis',
            index=models.Index(fields=['mood'], name='analysis_mood_idx'),
        ),
    ]
